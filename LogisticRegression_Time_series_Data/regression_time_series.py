# -*- coding: utf-8 -*-
"""Question4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mZFt-7RtGQASFC16PVJi3otLmtHkcQsR
"""

import sys 
import pandas as pd
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split
import numpy as np
import cv2
import matplotlib.pyplot as plt 
from sklearn.metrics import mean_squared_error
import matplotlib.image as mpimg
from sklearn.metrics import confusion_matrix,accuracy_score,f1_score
from sklearn.metrics import precision_score, recall_score, r2_score
from os import listdir
from os.path import isfile, join
from sklearn import datasets, svm, metrics
from keras.wrappers.scikit_learn import KerasClassifier
from sklearn.model_selection import cross_val_score
from tensorflow.python.keras.layers import Dense
from tensorflow.python.keras import Sequential
from keras.utils import to_categorical
import warnings
from keras.layers import Input
import sklearn.model_selection as model_selection
from numpy import array
import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'

def Read(filename):
  Data = pd.read_csv(filename,delimiter=';')
  Data = Data.values
  Data = Data[:,2:3]
  result = np.where(Data == '?')
  Data = Data[Data!='?']
  return Data,result[0]
def Split(X4_train,steps):
  X = list()
  Z = steps
  Y = list()
  l = len(X4_train)
  for i in range(l):
    Z = i
    end_index = i+steps
    if end_index > l-1:
      break
    seq_y =  X4_train[end_index] 
    Z = l 
    seq_x = X4_train[i:end_index] 
    X.append(seq_x)
    Z = X
    Y.append(seq_y)
  A = array(X)
  B = array(Y)
  return A, B

def predict(model,X4_test):
  X4_test = np.array(X4_test).astype(np.float32)
  y4_pred = model4.predict(X4_test, verbose=0)
  y4_pred = y4_pred.flatten()
  return y4_pred

filename = sys.argv[1]
#filename = "/content/drive/My Drive/household_power_consumption.txt"
Data,X_test4 = Read(filename)
X4,Y4 = Split(Data,60)
X4_train,Y4_train = X4,Y4
X4_train = np.array(X4_train).astype(np.float32)
Y4_train = np.array(Y4_train).astype(np.float32)
model4 = Sequential()
model4.add(Dense(50, activation = "relu", input_dim = X4_train.shape[1]))
model4.add(Dense(1))
model4.compile(optimizer='adam',loss='mse', metrics=['mse'])
#model4.compile(optimizer='adam', loss='mse')
model4.fit(X4_train,Y4_train, epochs=5, batch_size=100,verbose=0)

# print(X_test4.shape)
# print(Data.shape)

y_pred =[]
k=0
for i in X_test4:
  k=k+1
  test = []
  test = [Data[item] for item in range(i,i-60,-1)]
  test = np.array(test)
  test =np.reshape(test,(1,test.shape[0]))
  #print(test.shape)
  y_pred.append(predict(model4,test))
  # if(k ==25979 ):
  #   print(k)
#flat_list = [item for sublist in y_pred for item in sublist]
# for i in flat_list:
#   print(i)

for y in y_pred:
  for yy in y:
    print(yy)

